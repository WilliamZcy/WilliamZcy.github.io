<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Streamer辐射传输模型在Win10 64bit系统上编译使用</title>
      <link href="/post/9997c56c.html"/>
      <url>/post/9997c56c.html</url>
      
        <content type="html"><![CDATA[<p>终于接触辐射传输模型了，开始定量遥感之旅~</p><p>不过万事开头难o(╥﹏╥)o，首先解决软件的运行问题：</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><em>Streamer</em>是用来计算在各种大气和表面条件下辐射率（辐射强度）和辐照度（辐射通量）的辐射传输模型。通过与其他辐射传输模式的比较<sup>[1]</sup> ,<em>Streamer</em> 对云有较好的模拟能力，能更好地满足云雾辐射模拟工作。软件由威斯康星大学麦迪逊分校(<em>University of Wisconsin-Madison</em>)-空间科学和工程中心(<em>Space Science and Engineering Center</em> ,<em>SSEC</em>)-气象卫星合作研究所（<em>Cooperative Institute for Meteorological Satellite Studies</em>,<em>CIMSS</em>）的极地遥感和气候学小组维护，最新版本为2013年2月13日发布的3.1版本。</p><h2 id="下载Streamer"><a href="#下载Streamer" class="headerlink" title="下载Streamer"></a>下载<em>Streamer</em></h2><p>下载地址：<a href="https://stratus.ssec.wisc.edu/" target="_blank" rel="noopener">https://stratus.ssec.wisc.edu/</a>  </p><p>进入网页后，打开streamer介绍页面，找Download，点FTP site链接，接受协议，进入FTP服务器文件页面，里面有bin/，docs/，gui/三个文件夹和README文件，还有一个压缩包Streamer.tar。  </p><p><img src="https://i.loli.net/2018/10/18/5bc8962a775aa.jpg" width="30" height="12" alt="FTP截图.jpg" title="FTP截图.jpg"></p><p>bin/文件夹下有编译好的各平台的执行文件，包括Mac、Linux、Windows平台，但Windows的执行文件在我电脑上不能运行，是32位的； docs/文件夹下有帮助文档； gui/里是html文件和辅助文件，是用来生成输入文件的web接口；</p><p>压缩包里是streamer的源文件。</p><p>为了编译能在本机器(Windows10-64bit)上使用的可执行文件，选择下载Streamer.tar压缩包。</p><h2 id="编译Streamer"><a href="#编译Streamer" class="headerlink" title="编译Streamer"></a>编译<em>Streamer</em></h2><p>解压下载的压缩包后有三个文件夹，bandweights/，progs/，testio/。其中bandweights/是预设的波段文件，包括AVHRR、MODIS、GEOS、HIRS等等，testio/里是测试文件，包含一些输入文件、输出文件和输出模板。  </p><p>progs/是<em>Streamer</em>的源文件，里面是Fortran编写的.f文件，接下来我们需要将f文件编译成object文件，然后再生成可执行文件。帮助文档里用的gfortran来编译的，因此我们需要先下载编译器。</p><h3 id="1-下载GCC"><a href="#1-下载GCC" class="headerlink" title="1.下载GCC"></a>1.下载GCC</h3><p>GCC的在线安装有点慢，我们选择它的离线包来安装<sup>[2]</sup>：</p><p>下载地址：<a href="https://sourceforge.net/projects/mingw-w64/files/?source=navbar" target="_blank" rel="noopener">https://sourceforge.net/projects/mingw-w64/files/?source=navbar</a></p><p>针对win10 64bit选择 MinGW-W64 GCC-8.1.0 的 x86_64-posix-seh 版本下载，下载之后解压到自定义文件夹下,比如x:\mingw64。</p><h3 id="2-设置GCC环境变量"><a href="#2-设置GCC环境变量" class="headerlink" title="2.设置GCC环境变量"></a>2.设置GCC环境变量</h3><p>这一步很重要，把刚刚自定义文件夹下的lib、include、bin路径都添加到系统环境变量path中，打开命令行测试一下<code>gcc -v</code>命令，如果输出gcc版本信息就说明设置好咯。</p><h3 id="3-编译object文件"><a href="#3-编译object文件" class="headerlink" title="3.编译object文件"></a>3.编译object文件</h3><p>接下来进入刚刚streamer-progs文件夹下，利用<code>gfortran -c xxx.f</code>命令来将f文件编译成object文件，不过需要将文件夹下所有f文件都编译成Object文件，一个个转太麻烦，又不会写makefile文件，只好用Python的os模块来获取文件夹下所有f文件，然后通过<code>os.system()</code>运行命令，将所有f文件编译成o文件。</p><p><img src="https://i.loli.net/2018/10/19/5bc994a8ca103.jpg" alt="o文件.jpg" title="o文件.jpg"></p><h3 id="4-makefile"><a href="#4-makefile" class="headerlink" title="4.makefile"></a>4.makefile</h3><p><em>Streamer</em>已经写好了针对各个平台的makefile文件<sup>[3]</sup>，现在我们在progs文件夹下找到Makefile.win文件，将后缀名删除，这样我们就得到了现成的makefile文件。在progs文件夹下打开cmd，运行<code>make all</code>命令，等运行结束可以得到streamer.exe、getalb.exe、getband.exe、getcloud.exe、gethaze.exe五个可执行文件。</p><h3 id="5-设置Streamer环境变量"><a href="#5-设置Streamer环境变量" class="headerlink" title="5.设置Streamer环境变量"></a>5.设置Streamer环境变量</h3><p>把刚刚得到的五个exe文件拷贝到你自定义的文件夹下，比如x:\streamer\bin。将路径也添加到环境变量path中。  </p><p>这样<em>Streamer</em>就算是编译完了。</p><h2 id="测试Streamer"><a href="#测试Streamer" class="headerlink" title="测试Streamer"></a>测试<em>Streamer</em></h2><p>设置好了，我们来测试一下。在testio里找到testflx.inp以及模板文件streamer.def，将两个文件拷到相同文件夹下，然后在文件夹下运行 <code>streamer s testflx.inp</code>，会看到如下输出结果。</p><p><img src="https://i.loli.net/2018/10/19/5bc99ae951234.jpg" alt="test.jpg" title="test.jpg"></p><p>在文件夹下会生成输出文件testflx.des，可用记事本打开看一下内容。</p><p><img src="https://i.loli.net/2018/10/19/5bc99b5b03cd4.jpg" alt="flx.jpg" title="flx.jpg"></p><p>测试成功~</p><hr><p>安装成功，该研究<em>Streamer</em>复杂的输入去了。</p><hr><p>[1]: Comparison with Other Models <a href="https://stratus.ssec.wisc.edu/streamer/modeltable.html" target="_blank" rel="noopener">https://stratus.ssec.wisc.edu/streamer/modeltable.html</a>  </p><p>[2]: 如何用mingw-w64离线安装包来安装mingw <a href="https://blog.csdn.net/qq_27854685/article/details/80752078" target="_blank" rel="noopener">https://blog.csdn.net/qq_27854685/article/details/80752078</a></p><p>[3]:Streamer: Documentation-User’s Guide  <a href="https://stratus.ssec.wisc.edu/streamer/documentation.html" target="_blank" rel="noopener">https://stratus.ssec.wisc.edu/streamer/documentation.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Experiences </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Remote Sensing </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>部分卫星主要传感器信息整理</title>
      <link href="/post/8c21968f.html"/>
      <url>/post/8c21968f.html</url>
      
        <content type="html"><![CDATA[<p>整理部分卫星传感器信息，方便查找，不定期更新。</p><a id="more"></a><h2 id="1-MODIS-Terra-amp-Aqua"><a href="#1-MODIS-Terra-amp-Aqua" class="headerlink" title="1.MODIS/Terra&amp;Aqua"></a>1.MODIS/Terra&amp;Aqua</h2><p>参考资料[1]</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Moderate Resolution Imaging Spectroradiometer (MODIS)，中分辨率成像光谱仪。第一台由Terra卫星搭载，于1999年发射，赤道穿越时间为上午10:30；第二台由Aqua卫星搭载，于2002年发射，赤道穿越时间为下午1:30。Terra&amp;Aqua搭载的MODIS每隔1至2天观察整个地球表面，获取36个光谱波段的数据，波长从0.4$\mu m$到14.4$\mu m$不等。双MODIS设计的目的是优化成像，避免云层覆盖影响，同时尽量减少早晨和下午阳光下出现的阴影和眩光等光学效应。</p><p>MODIS数据产品有250m、500m、1000m三种不同的分辨率，有助于我们更好地了解发生在陆地、海洋和低层大气中的全球环境变化和动力学过程。MODIS数据记录可以扩展传统数据，比如NOAA的先进甚高分辨率辐射计数据，从而确保这些资料的连续性，以支持研究人员对短期和长期全球环境变化的调查研究。MODIS衍生数据产品在帮助开发和验证具有预测能力的全球系统模型方面继续发挥着重要作用，以帮助决策者应对全球环境变化。</p><h3 id="传感器技术规格"><a href="#传感器技术规格" class="headerlink" title="传感器技术规格"></a>传感器技术规格</h3><div class="table-container"><table><thead><tr><th>-</th><th style="text-align:left">-</th></tr></thead><tbody><tr><td>轨道：</td><td style="text-align:left">高度705 km, 太阳同步近极地圆形轨道</td></tr><tr><td>重复周期：</td><td style="text-align:left">16天</td></tr><tr><td>覆盖范围：</td><td style="text-align:left">2330km (垂直轨道方向)， 10km (星下点沿轨道方向)</td></tr><tr><td>重量：</td><td style="text-align:left">228.7kg</td></tr><tr><td>空间分辨率：</td><td style="text-align:left">250m (bands 1-2) 500m (bands 3-7) 1000m (bands 8-36)</td></tr><tr><td>数据传输率：</td><td style="text-align:left">10.6 Mbs/sec</td></tr><tr><td>量化：</td><td style="text-align:left">12 bits</td></tr><tr><td>视场角：</td><td style="text-align:left">110 <script type="math/tex">^\circ</script></td></tr><tr><td>波段：</td><td style="text-align:left">36 波段：1-19： 620 -965$nm$ ；20-36 ：3.66 - 14.28 $\mu m$</td></tr><tr><td>设计寿命：</td><td style="text-align:left">6 年</td></tr><tr><td>运行状况：</td><td style="text-align:left">在轨运行</td></tr></tbody></table></div><h3 id="波段信息"><a href="#波段信息" class="headerlink" title="波段信息"></a>波段信息</h3><table> <tr align="center"><td>主要应用</td><td>波段</td><td>波段范围</td><td>中心波长</td><td>频谱强度</td><td>要求信噪比</td></tr><tr align="center"><td rowspan="2">陆地/云/气溶胶边界</td><td>1</td><td>0.620 - 0.670</td><td>0.645</td><td>21.8</td><td>128</td></tr><tr align="center"><td>2</td><td>0.841 - 0.876</td><td>0.8585</td><td>24.7</td><td>201</td></tr><tr align="center"><td rowspan="5">陆地/云/气溶胶性质</td><td>3</td><td>0.459 - 0.479</td><td>0.469</td><td>35.3</td><td>243</td></tr><tr align="center"><td>4</td><td>0.545 - 0.565</td><td>0.555</td><td>29.0</td><td>228</td></tr><tr align="center"><td>5</td><td>1.230 - 1.250</td><td>1.24</td><td>5.4</td><td>74</td></tr><tr align="center"><td>6</td><td>1.628 - 1.652</td><td>1.64</td><td>7.3</td><td>274</td></tr><tr align="center"><td>7</td><td>2.105 - 2.155</td><td>2.13</td><td>1.0</td><td>110</td></tr> <tr align="center"><td rowspan="9">海洋水色/浮游植物/生物地球化学</td><td>8</td><td>0.405 - 0.420</td><td>0.4125</td><td>44.9</td><td>880</td></tr> <tr align="center"><td>9</td><td>0.438 - 0.448</td><td>0.443</td><td>41.9</td><td>838</td></tr> <tr align="center"><td>10</td><td>0.438 - 0.493</td><td>0.488</td><td>32.1</td><td>802</td></tr> <tr align="center"><td>11</td><td>0.526 - 0.536</td><td>0.531</td><td>27.9</td><td>754</td></tr> <tr align="center"><td>12</td><td>0.546 - 0.556</td><td>0.551</td><td>21.0</td><td>750</td></tr> <tr align="center"><td>13</td><td>0.662 - 0.672</td><td>0.667</td><td>9.5</td><td>910</td></tr> <tr align="center"><td>14</td><td>0.673 - 0.683</td><td>0.678</td><td>8.7</td><td>1087</td></tr> <tr align="center"><td>15</td><td>0.743 -0.753</td><td>0.748</td><td>10.2</td><td>586</td></tr> <tr align="center"><td>16</td><td>0.862 - 0.877</td><td>0.8695</td><td>6.2</td><td>516</td></tr> <tr align="center"><td rowspan="3">大气水汽</td><td>17</td><td>0.890 - 0.920</td><td>0.905</td><td>10.0</td><td>167</td></tr> <tr align="center"><td>18</td><td>0.931 - 0.941</td><td>0.936</td><td>3.6</td><td>57</td></tr> <tr align="center"><td>19</td><td>0.915 - 0.965</td><td>0.94</td><td>15.0</td><td>250</td></tr> <tr align="center"><td rowspan="4">地表/云 温度</td><td>20</td><td>3.660 - 3.840</td><td>3.75</td><td>0.45 (300K)</td><td>0.05</td></tr> <tr align="center"><td>21</td><td>3.929 - 3.989</td><td>3.959</td><td>2.38 (335K)</td><td>2</td></tr> <tr align="center"><td>22</td><td>3.929 - 3.989</td><td>3.959</td><td>0.67 (300K)</td><td>0.07</td></tr> <tr align="center"><td>23</td><td>4.020 - 4.080</td><td>4.05</td><td>0.79 (300K)</td><td>0.07</td></tr> <tr align="center"><td rowspan="2">大气温度</td><td>24</td><td>4.433 - 4.498</td><td>4.4655</td><td>0.17 (250K)</td><td>0.25</td></tr> <tr align="center"><td>25</td><td>4.482 - 4.549</td><td>4.5155</td><td>0.59 (275K)</td><td>0.25</td></tr> <tr align="center"><td rowspan="3">卷云、水汽</td><td>26</td><td>1.360 - 1.390</td><td>1.375</td><td>6.0</td><td>150</td></tr> <tr align="center"><td>27</td><td>6.535 - 6.895</td><td>6.715</td><td>1.16 (240K)</td><td>0.25</td></tr> <tr align="center"><td>28</td><td>7.175 - 7.475</td><td>7.325</td><td>2.18 (250K)</td><td>0.25</td></tr> <tr align="center"><td>云性质</td><td>29</td><td>8.400 - 8.700</td><td>8.55</td><td>9.58 (300K)</td><td>0.05</td></tr> <tr align="center"><td>臭氧</td><td>30</td><td>9.580 - 9.880</td><td>9.73</td><td>3.69 (250K)</td><td>0.25</td></tr> <tr align="center"><td rowspan="2">地表/云 温度</td><td>31</td><td>10.780 - 11.280</td><td>11.03</td><td>9.55 (300K)</td><td>0.05</td></tr> <tr align="center"><td>32</td><td>11.770 - 12.270</td><td>12.02</td><td>8.94 (300K)</td><td>0.05</td></tr> <tr align="center"><td rowspan="4">云顶高度</td><td>33</td><td>13.185 - 13.485</td><td>13.335</td><td>4.52 (260K)</td><td>0.25</td></tr> <tr align="center"><td>34</td><td>13.485 - 13.785</td><td>13.635</td><td>3.76 (250K)</td><td>0.25</td></tr> <tr align="center"><td>35</td><td>13.785 - 14.085</td><td>13.935</td><td>3.11 (240K)</td><td>0.25</td></tr> <tr align="center"><td>36</td><td>14.085 - 14.385</td><td>14.235</td><td>2.08 (220K)</td><td>0.35</td></tr></table><h2 id="2-AVHRR-NOAA"><a href="#2-AVHRR-NOAA" class="headerlink" title="2.AVHRR/NOAA"></a>2.AVHRR/NOAA</h2><p>参考资料:[2],[3],[4]</p><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>NOAA(National Oceanic and Atmospheric Administration,美国国家海洋和大气管理局)系列卫星从1970年NOAA-1到2017年的NOAA-20，迄今已经经历了48个年头。Advanced Very High Resolution Radiometer(先进甚高分辨率辐射计)是NOAA卫星所搭载的主要传感器之一，第一代AVHRR/1是四通道辐射计最早由TIROS-N卫星于1978年搭载升空，第二代AVHRR/2改进为五通道，最早搭载于1981年发射的NOAA-7上，第三代AVHRR/3有六个通道，最早搭载于1998年发射的NOAA-15上。</p><h3 id="传感器技术规格-1"><a href="#传感器技术规格-1" class="headerlink" title="传感器技术规格"></a>传感器技术规格</h3><table><tr align="center"><td>仪器参数</td><td>AVHRR/3</td></tr><tr align="center"><td>通道数</td><td>6</td></tr><tr align="center"><td>IFOV</td><td>1.3毫弧度</td></tr><tr align="center"><td>扫描周期</td><td>0.1 sec</td></tr><tr align="center"><td>对地扫描视场数</td><td>2048</td></tr><tr align="center"><td>视场步进角</td><td>1.362毫弧度</td></tr><tr align="center"><td>最大扫描角</td><td>55.4°</td></tr><tr align="center"><td>星下点分辨率</td><td>1.1km</td></tr><tr align="center"><td>扫描带宽约</td><td>2400km</td></tr><tr align="center"><td>量化</td><td>10bits</td></tr></table><h3 id="波段信息-1"><a href="#波段信息-1" class="headerlink" title="波段信息"></a>波段信息</h3><p>AVHRR/3</p><table><tr align="center"><td>波段</td><td>星下点分辨率</td><td>波段范围</td><td>主要应用</td></tr><tr align="center"><td>1</td><td>1.09km</td><td>0.58 - 0.68</td><td>日间云和地面成像</td></tr><tr align="center"><td>2</td><td>1.09km</td><td>0.725 - 1.00</td><td>陆地-水体分界</td></tr><tr align="center"><td>3A</td><td>1.09km</td><td>1.58 - 1.64</td><td>冰雪检测</td></tr><tr align="center"><td>3B</td><td>1.09km</td><td>3.55 - 3.93</td><td>夜间云图、海表温度</td></tr><tr align="center"><td>4</td><td>1.09km</td><td>10.30 - 11.30</td><td>夜间云图、海表温度</td></tr><tr align="center"><td>5</td><td>1.09km</td><td>11.50 - 12.50</td><td>海表温度</td></tr></table><p>有空继续整理。。。</p><hr><p>[1]: <em>“Terra &amp; Aqua Moderate Resolution Imaging Spectroradiometer (MODIS)”</em>   <a href="https://ladsweb.modaps.eosdis.nasa.gov/missions-and-measurements/modis/" target="_blank" rel="noopener">https://ladsweb.modaps.eosdis.nasa.gov/missions-and-measurements/modis/</a>   </p><p>[2]: History of NOAA Satellites <a href="https://www.nesdis.noaa.gov/content/history-noaa-satellites" target="_blank" rel="noopener">https://www.nesdis.noaa.gov/content/history-noaa-satellites</a></p><p>[3]:Advanced Very High Resolution Radiometer - AVHRR <a href="https://noaasis.noaa.gov/NOAASIS/ml/avhrr.html" target="_blank" rel="noopener">https://noaasis.noaa.gov/NOAASIS/ml/avhrr.html</a></p><p>[4]: NOAA系列卫星数据格式 国家卫星气象中心</p>]]></content>
      
      
      <categories>
          
          <category> Experiences </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Remote Sensing </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello</title>
      <link href="/post/f7d18982.html"/>
      <url>/post/f7d18982.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="Hello-World！"><a href="#Hello-World！" class="headerlink" title="Hello World！"></a>Hello World！</h1><p><strong>Welcome， </strong><br><strong>Here is my blog.</strong></p>]]></content>
      
      
      <categories>
          
          <category> Essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Welcome </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 利用GDAL对图像进行几何校正</title>
      <link href="/post/edf42ac0.html"/>
      <url>/post/edf42ac0.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>If the implementation is hard to explain, it’s a bad idea.<br>If the implementation is easy to explain, it may be a good idea.<br>——The Zen of python</p></blockquote><hr><p>最近需要利用Python的GDAL库对遥感图像进行几何校正，在网上搜了搜相关资料，大部分是来自李民录老师的《GDAL源码剖析与开发指南》及其博客的C++代码，关于Python的资料较少，于是便四处参考查阅，最终实现了校正功能，现总结整理一下，如果有任何意见建议，欢迎批评指正。<br><a id="more"></a></p><h2 id="一、几何校正方法"><a href="#一、几何校正方法" class="headerlink" title="一、几何校正方法"></a>一、几何校正方法</h2><p>&emsp;&emsp;图像校正本质是建立一种从原始图像行列号到某种投影的数学关系，即实现图像行列坐标到投影坐标的转换。不同的校正方法利用了不同的方法来表示转换关系，但本质上式相同的。常用的几何校正方法包括：几何多项式校正、有理函数模型校正、局部区域校正模型、地理查找表校正等。<br>&emsp;&emsp;GDAL库中可以实现的校正方法就包括以上四种方法，即：<strong>1~3次的几何多项式校正</strong>、<strong>RPC（有理函数系数）校正</strong>、<strong>TPS（薄板样条）校正</strong>、<strong>GeoLoc校正</strong>。<em>[1]</em></p><h2 id="二、转换关系的描述"><a href="#二、转换关系的描述" class="headerlink" title="二、转换关系的描述"></a>二、转换关系的描述</h2><p>&emsp;&emsp;不同的校正方法需要的信息也不相同，通常我们采用地面控制点（GCPs）的方式来建立转换关系，如果是RPC校正，则需要RPC文件来提供RPC系数。有的卫星数据，例如MODIS是包含GeoLocation Arrays提供每个像素的经纬度，例如Himawari-8卫星数据则直接提供了投影和地理变换参数(仿射变换六参数<em>[2]</em>，这个最简单)。</p><h2 id="三、Python中的GDAL几何校正"><a href="#三、Python中的GDAL几何校正" class="headerlink" title="三、Python中的GDAL几何校正"></a>三、Python中的GDAL几何校正</h2><p>&emsp;&emsp;Python中的几何校正主要靠 <code>gdal.Warp()</code> 函数来实现的，下面说一下主要流程：</p><h3 id="1-读取未经校正的图像"><a href="#1-读取未经校正的图像" class="headerlink" title="1.读取未经校正的图像"></a>1.读取未经校正的图像</h3><p>&emsp;&emsp;主要利用 <code>gdal.Open()</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> osgeo <span class="keyword">import</span> gdal</span><br><span class="line"><span class="keyword">from</span> osgeo <span class="keyword">import</span> osr</span><br><span class="line"></span><br><span class="line">dataset = gdal.Open(<span class="string">r'xxx.tif'</span>, gdal.GA_Update)</span><br></pre></td></tr></table></figure><h3 id="2-构造地面控制点"><a href="#2-构造地面控制点" class="headerlink" title="2.构造地面控制点"></a>2.构造地面控制点</h3><p>&emsp;&emsp;构造控制点列表 <code>gcps_list</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实际控制点肯定要多的多，这里只写了四个点.</span></span><br><span class="line">gcps_list = [gdal.GCP(<span class="number">-111.931075</span>, <span class="number">41.745836</span>, <span class="number">0</span>, <span class="number">1078</span>, <span class="number">648</span>),</span><br><span class="line"> gdal.GCP(<span class="number">-111.901655</span>, <span class="number">41.749269</span>, <span class="number">0</span>, <span class="number">3531</span>, <span class="number">295</span>),</span><br><span class="line"> gdal.GCP(<span class="number">-111.899180</span>, <span class="number">41.739882</span>, <span class="number">0</span>, <span class="number">3722</span>, <span class="number">1334</span>),</span><br><span class="line"> gdal.GCP(<span class="number">-111.930510</span>, <span class="number">41.728719</span>, <span class="number">0</span>, <span class="number">1102</span>, <span class="number">2548</span>)]</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;附控制点构造函数<code>gdal.GCP()</code>的说明<em>[3]</em>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gdal.GCP([x], [y], [z], [pixel], [line], [info], [id])</span><br><span class="line"><span class="comment"># x、y、z是控制点对应的投影坐标，默认为0;</span></span><br><span class="line"><span class="comment"># pixel、line是控制点在图像上的列、行位置，默认为0;</span></span><br><span class="line"><span class="comment"># info、id是用于说明控制点的描述和点号的可选字符串，默认为空.</span></span><br></pre></td></tr></table></figure><h3 id="3-添加地面控制点到图像"><a href="#3-添加地面控制点到图像" class="headerlink" title="3.添加地面控制点到图像"></a>3.添加地面控制点到图像</h3><p>&emsp;&emsp;在添加之前需要指定一个空间参考，这里以WGS84基准的地理坐标系(经纬度)为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sr = osr.SpatialReference()</span><br><span class="line">sr.SetWellKnownGeogCS(<span class="string">'WGS84'</span>)</span><br><span class="line"><span class="comment"># 添加控制点</span></span><br><span class="line">dataset.SetGCPs(gcps, sr.ExportToWkt())</span><br></pre></td></tr></table></figure><h3 id="4-进行校正"><a href="#4-进行校正" class="headerlink" title="4.进行校正"></a>4.进行校正</h3><p>&emsp;&emsp;校正就直接调用<code>gdal.Warp()</code>就可以了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tps校正 重采样:最邻近法</span></span><br><span class="line">dst_ds = gdal.Warp(<span class="string">r'xxx_dst.tif'</span>, dataset, format=<span class="string">'GTiff'</span>, tps=<span class="keyword">True</span>,</span><br><span class="line">   xRes=<span class="number">0.05</span>, yRes=<span class="number">0.05</span>, dstNodata=<span class="number">65535</span>, srcNodata=<span class="number">65535</span>,</span><br><span class="line">   resampleAlg=gdal.GRIORA_NearestNeighbour， outputType=gdal.GDT_Int32)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;附<code>gdal.Warp()</code>的参数说明<em>[4]</em>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">gdal.Warp(destNameOrDestDS, srcDSOrSrcDSTab, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># destNameOrDestDS --- 输出数据集路径或对象</span></span><br><span class="line"><span class="comment"># srcDSOrSrcDSTab --- 数据集对象或文件名or数据集对象或文件名的数组</span></span><br><span class="line"><span class="comment"># 关键字参数是gdal.WarpOptions()的返回值，或者直接定义gdal.WarpOptions()</span></span><br><span class="line"></span><br><span class="line">gdal.WarpOptions(options = [], format = <span class="string">'GTiff'</span>, outputBounds = <span class="keyword">None</span>,</span><br><span class="line"> outputBoundsSRS = one, xRes = <span class="keyword">None</span>, yRes = <span class="keyword">None</span>,</span><br><span class="line"> targetAlignedPixels = <span class="keyword">False</span>, width = <span class="number">0</span>, height = <span class="number">0</span>, srcSRS = <span class="keyword">None</span>,</span><br><span class="line"> dstSRS = <span class="keyword">None</span>, srcAlpha = <span class="keyword">False</span>, dstAlpha = <span class="keyword">False</span>, warpOptions = <span class="keyword">None</span>,</span><br><span class="line"> errorThreshold = <span class="keyword">None</span>, warpMemoryLimit = <span class="keyword">None</span>, creationOptions = <span class="keyword">None</span>,</span><br><span class="line"> outputType = GDT_Unknown, workingType = GDT_Unknown, resampleAlg = <span class="keyword">None</span>,</span><br><span class="line">                 srcNodata = <span class="keyword">None</span>, dstNodata = <span class="keyword">None</span>, multithread = <span class="keyword">False</span>, tps = <span class="keyword">False</span>,</span><br><span class="line">                 rpc = <span class="keyword">False</span>, geoloc = <span class="keyword">False</span>, polynomialOrder = <span class="keyword">None</span>,</span><br><span class="line">                 transformerOptions = <span class="keyword">None</span>, cutlineDSName = <span class="keyword">None</span>, cutlineLayer = <span class="keyword">None</span>,</span><br><span class="line">                 cutlineWhere = <span class="keyword">None</span>, cutlineSQL = <span class="keyword">None</span>, cutlineBlend = <span class="keyword">None</span>,</span><br><span class="line">                 ropToCutline = <span class="keyword">False</span>, copyMetadata = <span class="keyword">True</span>, metadataConflictValue = <span class="keyword">None</span>,</span><br><span class="line">                 setColorInterpretation = <span class="keyword">False</span>, callback = <span class="keyword">None</span>, callback_data = <span class="keyword">None</span>):</span><br><span class="line"><span class="comment"># options --- 字符串数组, 字符串或者空值</span></span><br><span class="line"><span class="comment"># format --- 输出格式 ("GTiff", etc...)</span></span><br><span class="line"><span class="comment"># outputBounds --- 结果在目标空间参考的边界范围(minX, minY, maxX, maxY)</span></span><br><span class="line"><span class="comment"># outputBoundsSRS --- 结果边界范围的空间参考, 如果在dstSRS中没有指定的话，采用此参数</span></span><br><span class="line"><span class="comment"># xRes, yRes --- 输出分辨率，即像素的大小</span></span><br><span class="line"><span class="comment"># targetAlignedPixels --- 是否强制输出边界是输出分辨率的倍数</span></span><br><span class="line"><span class="comment"># width --- 输出栅格的列数</span></span><br><span class="line"><span class="comment"># height --- 输出栅格的行数</span></span><br><span class="line"><span class="comment"># srcSRS --- 输入数据集的空间参考</span></span><br><span class="line"><span class="comment"># dstSRS --- 输出数据集的空间参考</span></span><br><span class="line"><span class="comment"># srcAlpha --- 是否将输入数据集的最后一个波段作为alpha波段</span></span><br><span class="line"><span class="comment"># dstAlpha --- 是否强制创建输出</span></span><br><span class="line"><span class="comment"># outputType --- 输出栅格的变量类型 (gdal.GDT_Byte, etc...)</span></span><br><span class="line"><span class="comment"># workingType --- working type (gdal.GDT_Byte, etc...)</span></span><br><span class="line"><span class="comment"># warpOptions --- list of warping options</span></span><br><span class="line"><span class="comment"># errorThreshold --- 近似转换的误差阈值(误差像素数目)</span></span><br><span class="line"><span class="comment"># warpMemoryLimit --- 工作内存限制 Bytes</span></span><br><span class="line"><span class="comment"># resampleAlg --- 重采样方法</span></span><br><span class="line"><span class="comment"># creationOptions --- list of creation options</span></span><br><span class="line"><span class="comment"># srcNodata --- 输入栅格的无效值</span></span><br><span class="line"><span class="comment"># dstNodata --- 输出栅格的无效值</span></span><br><span class="line"><span class="comment"># multithread --- 是否多线程和I/O操作</span></span><br><span class="line"><span class="comment"># tps --- 是否使用Thin Plate Spline校正方法</span></span><br><span class="line"><span class="comment"># rpc --- 是否使用RPC校正</span></span><br><span class="line"><span class="comment"># geoloc --- 是否使用地理查找表校正</span></span><br><span class="line"><span class="comment"># polynomialOrder --- 几何多项式校正次数</span></span><br><span class="line"><span class="comment"># transformerOptions --- list of transformer options</span></span><br><span class="line"><span class="comment"># cutlineDSName --- cutline数据集名称</span></span><br><span class="line"><span class="comment"># cutlineLayer --- cutline图层名称</span></span><br><span class="line"><span class="comment"># cutlineWhere --- cutline WHERE 子句</span></span><br><span class="line"><span class="comment"># cutlineSQL --- cutline SQL语句</span></span><br><span class="line"><span class="comment"># cutlineBlend --- cutline blend distance in pixels</span></span><br><span class="line"><span class="comment"># cropToCutline --- 是否使用切割线范围作为输出边界</span></span><br><span class="line"><span class="comment"># copyMetadata --- 是否复制元数据</span></span><br><span class="line"><span class="comment"># metadataConflictValue --- 元数据冲突值</span></span><br><span class="line"><span class="comment"># setColorInterpretation --- 是否强制将输入栅格颜色表给输出栅格</span></span><br><span class="line"><span class="comment"># callback --- 回调函数</span></span><br><span class="line"><span class="comment"># callback_data --- 用于回调的用户数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数很多，有些也没有试验过，有翻译不对的地方也请批评指正。</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;多项式校正和TPS校正利用上述流程即可校正，对于<strong>Geoloc校正</strong>，可以参考李老师博文<em>[5]</em> <em>[6]</em>中的思路，分为两种情况：</p><ul><li>对于自带GeoLocation元数据段的MODIS数据，利用<code>gdal.Info()</code>查看波段信息，直接利用<code>gdal.Warp()</code>设置<code>geoloc=True</code>后,对目标波段进行校正即可：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ds = gdal.Warp(<span class="string">r'X:\ModisNearest.tif'</span>,</span><br><span class="line">   <span class="string">r'HDF4_EOS:EOS_SWATH:"X:\MOD021KM.A2018130.0220.061.2018130132414\MOD021KM.A2018130.0220.061.2018130132414.hdf":MODIS_SWATH_Type_L1B:EV_1KM_RefSB'</span>,</span><br><span class="line">   width=<span class="number">2030</span>, height=<span class="number">1354</span>, format=<span class="string">'GTiff'</span>, geoloc=<span class="keyword">True</span>,</span><br><span class="line">   dstSRS=sr.ExportToWkt(), resampleAlg=gdal.GRIORA_NearestNeighbour)</span><br></pre></td></tr></table></figure><ul><li>对于其他类型数据，则需要构造VRT文件，然后指定geoloc信息<em>[7]</em>，假设现在有一幅未校正图像 XXX.tif，还有 longitude.tif，latitude.tif 两个经纬度文件(写成一个文件也可以，只不过需要改 X_BAND 和  Y_BAND 的值)，于是我们构造一个 xxx.vrt 文件，内容如下：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">VRTDataset</span> <span class="attr">rasterXSize</span>=<span class="string">"60"</span> <span class="attr">rasterYSize</span>=<span class="string">"39"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Metadata</span> <span class="attr">domain</span>=<span class="string">"GEOLOCATION"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MDI</span> <span class="attr">key</span>=<span class="string">"SRS"</span>&gt;</span>GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563,AUTHORITY["EPSG","7030"]],TOWGS84[0,0,0,0,0,0,0],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9108"]],AXIS["Lat",NORTH],AXIS["Long",EAST],AUTHORITY["EPSG","4326"]]<span class="tag">&lt;/<span class="name">MDI</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MDI</span> <span class="attr">key</span>=<span class="string">"X_DATASET"</span>&gt;</span>X:\longitude.tif<span class="tag">&lt;/<span class="name">MDI</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MDI</span> <span class="attr">key</span>=<span class="string">"X_BAND"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">MDI</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MDI</span> <span class="attr">key</span>=<span class="string">"PIXEL_OFFSET"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">MDI</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MDI</span> <span class="attr">key</span>=<span class="string">"PIXEL_STEP"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">MDI</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MDI</span> <span class="attr">key</span>=<span class="string">"Y_DATASET"</span>&gt;</span>X:/latitude.tif<span class="tag">&lt;/<span class="name">MDI</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MDI</span> <span class="attr">key</span>=<span class="string">"Y_BAND"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">MDI</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MDI</span> <span class="attr">key</span>=<span class="string">"LINE_OFFSET"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">MDI</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MDI</span> <span class="attr">key</span>=<span class="string">"LINE_STEP"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">MDI</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Metadata</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">VRTRasterBand</span> <span class="attr">dataType</span>=<span class="string">"Int16"</span> <span class="attr">band</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ColorInterp</span>&gt;</span>Gray<span class="tag">&lt;/<span class="name">ColorInterp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NoDataValue</span>&gt;</span>65535<span class="tag">&lt;/<span class="name">NoDataValue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SimpleSource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">SourceFilename</span> <span class="attr">relativeToVRT</span>=<span class="string">"1"</span>&gt;</span>X:/XXX.tif<span class="tag">&lt;/<span class="name">SourceFilename</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">SourceBand</span>&gt;</span>3<span class="tag">&lt;/<span class="name">SourceBand</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">SrcRect</span> <span class="attr">xOff</span>=<span class="string">"0"</span> <span class="attr">yOff</span>=<span class="string">"0"</span> <span class="attr">xSize</span>=<span class="string">"100"</span> <span class="attr">ySize</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">DstRect</span> <span class="attr">xOff</span>=<span class="string">"0"</span> <span class="attr">yOff</span>=<span class="string">"0"</span> <span class="attr">xSize</span>=<span class="string">"100"</span> <span class="attr">ySize</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">SimpleSource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">VRTRasterBand</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">VRTDataset</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;其中关键的是<code>&lt;Metadata&gt;</code>段中的9个key，其中<code>X_DATASET</code>和<code>Y_DATASET</code>指定了行列对应的经纬度波段，其他标签含义从略，可看参考资料。VRT文件后半部分的<code>&lt;SourceFilename&gt;</code>指定了需要校正的文件。<br>有了VRT文件，我们就可以进行校正了，输入改为vrt文件路径，<code>geoloc=True</code>用<code>Warp()</code>校正。</p><hr><p>&emsp;&emsp;关于RPC校正，我没有数据，没有测试过。。。但是经过一番搜索[8] ,看了里面gdal的单元测试文件，有如下思路以供参考:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rpc = [ <span class="string">"HEIGHT OFF=l09"</span>, <span class="string">"LINE NUM COEFF=-0. 001245683 -0. 09427649 -1. 006342 "</span></span><br><span class="line">        <span class="string">"-1. 954469e-05 0. 001033926 2.020534e-08 -3.845472e-07 一0.002075817 "</span></span><br><span class="line">        <span class="string">"0.0005520694 0 -4.642442e-06 -3.271793e-06 2. 705977e-05 -7.634384e-07 "</span></span><br><span class="line">        <span class="string">"-2.132832e-05 -3.248862e-05 -8.17894e-06 -3.678094e-07 2.002032e-06 "</span></span><br><span class="line">        <span class="string">"3.693162e-08"</span>, <span class="string">"LONG OFF=7.1477"</span></span><br><span class="line">        <span class="string">"SAMP DEN COEFF=l "</span> ......]</span><br><span class="line">ds.SetMetadata(rpc,<span class="string">'RPC'</span>)</span><br><span class="line">dst_ds = gdal.Warp(<span class="string">'output.xxx'</span>, ds, dstSRS=<span class="string">'EPSG:4326'</span>, xRes=<span class="number">0.0002</span>, yRes=<span class="number">0.0002</span>,</span><br><span class="line">rpc=<span class="keyword">True</span>, transformerOptions = [<span class="string">r'RPC_DEM=X:\DEM.tif'</span>])</span><br></pre></td></tr></table></figure><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>&emsp;&emsp;人生苦短，我用Python。</p><hr><p>参考资料<br>[1]：李民录. GDAL源码剖析与开发指南[M]. 人民邮电出版社, 2014.<br>[2]：<a href="https://blog.csdn.net/ivan_ljf/article/details/9226463" target="_blank" rel="noopener">https://blog.csdn.net/ivan_ljf/article/details/9226463</a> 关于GDAL计算图像坐标的几个问题<br>[3]：Garrad C. Geoprocessing with Python[M]. 2016.<br>[4]：<em>gdal.py</em>    Python gdal 包中定义代码<br>[5]：<a href="https://blog.csdn.net/liminlu0314/article/details/9181959" target="_blank" rel="noopener">https://blog.csdn.net/liminlu0314/article/details/9181959</a> 使用GDAL工具对FY3系列卫星数据进行校正<br>[6]：<a href="https://blog.csdn.net/liminlu0314/article/details/8623607" target="_blank" rel="noopener">https://blog.csdn.net/liminlu0314/article/details/8623607</a> 使用GDAL对HDF数据进行校正<br>[7]：<a href="https://stackoverflow.com/questions/50472624/reference-lat-lon-vrt-files-in-data-vrt-for-gdaltranslaste" target="_blank" rel="noopener">https://stackoverflow.com/questions/50472624/reference-lat-lon-vrt-files-in-data-vrt-for-gdaltranslaste</a> Reference Lat/Lon vrt files in data vrt for gdal translaste<br>[8]：<a href="https://svn.osgeo.org/gdal/" target="_blank" rel="noopener">https://svn.osgeo.org/gdal/</a>  这里面有gdal的单元测试文件</p><hr>]]></content>
      
      
      <categories>
          
          <category> Experiences </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GDAL </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
